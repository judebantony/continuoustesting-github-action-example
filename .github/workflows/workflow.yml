name: Main Branch

on:
  push:
    branches: [ main ]

jobs:

  syntheticDataDownload:
    name: Download Synthetic Test Data File from Gretel  
    runs-on: ubuntu-latest
    
    steps:
    - name: Get Synthetic Test Data File
      id: myRequest
      uses: fjogeleit/http-request-action@master
      with:
        url: 'https://api.gretel.cloud/projects/judebantony-868a3/artifacts/download?key=gretel_bf2744b39f6a48e48c6d19b6b4e2221e_BankChurners.csv'
        method: 'GET'
        customHeaders: '{"Authorization": "${{ secrets.GRETEL_TOKEN }}"}'
    - name: Store the Response
      run: cat <<< ${{ toJSON(steps.myRequest.outputs.response) }} > gretel.json
    - name: Read the Respose
      id: format_script
      uses: notiz-dev/github-action-json-property@release
      with: 
          path: 'gretel.json'
          prop_path: 'data.data.url'
    - run: curl -X GET "${{steps.format_script.outputs.prop}}" >  gretel_out.csv
    - name: Upload code coverage report
      uses: actions/upload-artifact@v2
      with:
        name: gretel_testdata
        path: gretel_out.csv

  test:
    name: Build and Unit Test
    runs-on: ubuntu-latest
    needs: [syntheticDataDownload]
    
    steps:
      - name: Check out the code
        uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2     
      - name: Build
        run: mvn -B clean package -DskipTests
      - name: Run UnitTest and Verify 
        run: mvn -B verify -DexcludedGroups="Smoke | Staging | BrowserStack | LamdaTest"
      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
      - name: Log code coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
      - name: Upload code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/
      - name: Adding Junit Report
        uses: ashley-taylor/junit-report-annotations-action@master
        if: always()
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}          
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
           files: target/surefire-reports/*.xml

      
              
  codeqlScan:
      name: SAST Scan using CodeQL
      runs-on: ubuntu-latest
      needs: [test]
      
      permissions:
        actions: read
        contents: read
        security-events: write
      strategy:
        fail-fast: false
        matrix:
          language: [ 'java' ]
          
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
           fetch-depth: 0
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
  
  gitHubPakageArtifactPush:
    name: Publish Artifact to GitHub Package
    runs-on: ubuntu-latest 
    needs: [codeqlScan] 
    
    permissions: 
      contents: read
      packages: write 
      
    steps:
      - name: Check out the code
        uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Publish package
        run: mvn --batch-mode deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

